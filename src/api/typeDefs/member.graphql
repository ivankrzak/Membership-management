type Member {
  id: Int
  cardNumber: Int
  firstName: String
  lastName: String
  isStudent: Boolean
  hasActiveMembership: Boolean
  membershipValidTill: Date
  visits: Int
  createdAt: Date
  updatedAt: Date
  isBlocked: Boolean
  subscriptions: [Subscription]
  personalData: PersonalData
}

input CreateMemberDataInput {
  cardNumber: Int!
  firstName: String!
  lastName: String!
  isStudent: Boolean!
}

input CreateMemberInput {
  memberData: CreateMemberDataInput!
  personalData: CreatePersonalDataInput!
  subscriptionData: CreateSubscriptionDataInput
}

input UpdateMemberInput {
  memberData: CreateMemberDataInput!
  personalData: CreatePersonalDataInput!
}

type Mutation {
  createMember(input: CreateMemberInput!): Member
  updateMember(input: UpdateMemberInput!, cardNumber: Int!): Member
  prolongMembership(cardNumber: Int!): Boolean
  deleteMember(memberId: Int!): Boolean
  blockMember(isBlocked: Boolean!, cardNumber: Int!): Boolean
}

type Query {
  members: [Member]!
  member(cardNumber: Int!): Member!
  getActiveSubscriptions(cardNumber: Int!): [Subscription]
}
